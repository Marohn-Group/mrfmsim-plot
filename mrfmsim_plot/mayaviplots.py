from mayavi import mlab
import numpy as np

def mayavi_image_plane(dataset, grid, size=(600, 600), **kwargs):
    """Plot the three-dimensional dataset with ``image_plane_widget``.

    The x, y, z grid used needs to be a full-sized grid, meaning x, y, z and
    dataset has the exact dimensions and shape.

    :param np.array dataset: data to image
    :param np.array/list grid: ``mrfmsim.Grid`` object
        or object that has the following attributes:
        - grid_array: full grid in x, y, and z direction
          This can be generated by np.mgrid, or np.broadcast_arrays of
          appropriate shape.
        - extents: the extents of the grid in the x, y, and z direction
        - shape: the shape of the grid
    :param tuple size: the size of the figure
    :param kwargs: additional keyword arguments to pass to the
        ``image_plane_widget`` function
    """

    extent = grid.extents.ravel()
    grid_array_full = np.broadcast_arrays(*grid.grid_array)

    mlab.figure(size=size)
    vtk_dataset = mlab.pipeline.scalar_field(*grid_array_full, dataset)
    for i, orientation in enumerate(["x_axes", "y_axes", "z_axes"]):
        mlab.pipeline.image_plane_widget(
            vtk_dataset,
            plane_orientation=orientation,
            slice_index=grid.shape[i] / 2,
            **kwargs
        )
    mlab.outline()
    mlab.axes(extent=extent)
    mlab.colorbar(orientation="vertical")

    return mlab


def mayavi_save(func):
    """Decorator to save the plot to a file directly.
    
    A decorator is used because the offscreen option needs to be set before
    the mlab object is created. The decorator adds a keyword filename argument
    to the plotting function.
    """

    def wrapper(*args, filename, **kwargs):
        mlab.options.offscreen = True
        mlab_obj = func(*args, **kwargs)

        mlab_obj.savefig(filename)
        mlab_obj.close()
        mlab.options.offscreen = False

    return wrapper
